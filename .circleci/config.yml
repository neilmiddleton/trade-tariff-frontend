version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^dependabot/(?!docker/).*/
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only:
        - /^release-202[\d-]+/
    branches:
      ignore:
        - "/.*/"


orbs:
  aws-cli: circleci/aws-cli@2.0.3
  terraform: circleci/terraform@3.2.1
  ruby: circleci/ruby@2
  node: circleci/node@5
  browser-tools: circleci/browser-tools@1
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  tariff: trade-tariff/trade-tariff-ci-orb@0

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.5.5
    resource_class: small
    working_directory: "/tmp/terraform"
    environment:
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1

commands:
  cf-deploy-docker:
    parameters:
      docker_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string

    steps:
      - checkout

      - tariff/cf-install:
          space: << parameters.space >>

      - tariff/deploy-dark-app:
          aws_access_key_id: "$AWS_ACCESS_KEY_ID"
          aws_secret_access_key: "$AWS_SECRET_ACCESS_KEY"
          cf_app: tariff-frontend
          docker_image: tariff-frontend
          docker_tag: << parameters.docker_tag >>
          ecr_repo: "$ECR_REPO"
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - run:
          name: Map dark routes
          command: |
            cf map-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              london.cloudapps.digital \
              -n "$CF_APP-<< parameters.environment_key >>-dark"

            cf add-network-policy \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              "$CF_BACKEND_APP_XI-<< parameters.environment_key >>" \
              --protocol tcp \
              --port 8080

            cf add-network-policy \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              "$CF_BACKEND_APP_UK-<< parameters.environment_key >>" \
              --protocol tcp \
              --port 8080

      - tariff/test-dark-app:
          cf_app: tariff-frontend
          environment_key: << parameters.environment_key >>
          healthcheck_path: "find_commodity"

      - run:
          name: "Pivot CDN route"
          command: |
            app_name="${CF_APP}-<< parameters.environment_key >>"
            dark_app="${app_name}-dark"

            cf map-route "$dark_app" "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk"
            cf unmap-route  "$app_name" "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk"

      - tariff/pivot-dark-app:
          app_domain_prefix: << parameters.app_domain_prefix >>
          cf_app: tariff-frontend
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  cf-deploy-review:
    steps:
      - tariff/cf-install:
          space: development
      - run:
          name: Fetch existing manifest
          command: |
            cf create-app-manifest "$CF_APP-dev" -p deploy_manifest.yml
      - run:
          name: Find PR number
          command: |
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed 's|https://github.com/||' | cut -d '/' -f 4)
            echo "export PR_NUMBER=${PR_NUMBER}" >> $BASH_ENV
            echo "export REVIEW_URL_ID='pr${PR_NUMBER}'" >> $BASH_ENV
      - run:
          name: Update app manifest
          command: |
            sed -i "s/instances: [0-9]\+/instances\: 1/" deploy_manifest.yml
            sed -i "s|CORS_HOST: dev\.trade-tariff\.service\.gov\.uk|CORS_HOST: ${CF_APP}-${REVIEW_URL_ID}.london.cloudapps.digital|" deploy_manifest.yml
            sed -i "/BASIC_/d" deploy_manifest.yml
            sed -i "s|HOST: dev\.trade-tariff\.service\.gov\.uk|HOST: ${CF_APP}-${REVIEW_URL_ID}.london.cloudapps.digital|" deploy_manifest.yml
      - run:
          name: Push review app
          command: |
            export DOCKER_IMAGE=tariff-frontend
            export DOCKER_TAG=dev-${CIRCLE_SHA1}

            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "$CF_APP-${REVIEW_URL_ID}" \
              -f deploy_manifest.yml \
              --no-route \
              --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
              --docker-username "$AWS_ACCESS_KEY_ID"

            cf map-route "$CF_APP-$REVIEW_URL_ID" london.cloudapps.digital -n "$CF_APP-$REVIEW_URL_ID"

            # Enable routing from this service to the backend applications which are private
            cf add-network-policy "$CF_APP-$REVIEW_URL_ID" "$CF_BACKEND_APP_XI-dev" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-$REVIEW_URL_ID" "$CF_BACKEND_APP_UK-dev" --protocol tcp --port 8080
      - run:
          name: Find JIRA ticket number
          command: |
            REPO_API_URL=$(echo "${CIRCLE_REPOSITORY_URL}/" | sed 's|.git/$||' | sed 's|git@github.com:|https://api.github.com/repos/|')
            JIRA_TICKET=$(curl --silent --show-error "${REPO_API_URL}/pulls/${PR_NUMBER}" | jq -r '.body' | grep -oP 'HOTT-\d{4,5}' | head -1 || true)
            echo "FOUND ${JIRA_TICKET}"
            echo "export JIRA_TICKET=${JIRA_TICKET}" >> $BASH_ENV
      - run:
          name: Generate JIRA comment
          command: |
            APP_URL="https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
            echo "{ \"body\":\"Pull Request ${PR_NUMBER}\n${CIRCLE_PULL_REQUEST}\n\nReview App\n${APP_URL}\" }" > jira_comment.json
      - run:
          name: Notify JIRA
          command: |
            if [[ $JIRA_TICKET != '' ]]
            then
              echo "NOTIFYING TICKET ${JIRA_TICKET}"

              curl \
                --request POST \
                --header "Content-Type: application/json" \
                --user "${JIRA_USERNAME}:${JIRA_TOKEN}" \
                --silent \
                --output /dev/null \
                --show-error \
                --fail \
                --data @jira_comment.json \
                https://transformuk.atlassian.net/rest/api/2/issue/${JIRA_TICKET}/comment
            fi
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          custom: |
            {
              "text": "Review App deployed for $CIRCLE_PROJECT_NAME",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Review App deployed for PR ${PR_NUMBER}  :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*URL*: https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*:\n $CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n $CIRCLE_USERNAME"
                    }
                  ],
                  "accessory": {
                    "type": "image",
                    "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                    "alt_text": "CircleCI logo"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View App"
                      },
                      "url": "https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
                    }
                  ]
                }
              ]
            }

  cf-purge-reviews:
    steps:
      - tariff/cf-install:
          space: development
      - run:
          name: Find open PRs
          command: |
            DAYS=7
            REPO_API_URL=$(echo "${CIRCLE_REPOSITORY_URL}/" | sed 's|.git/$||' | sed 's|git@github.com:|https://api.github.com/repos/|')

            curl --fail --retry 3 --show-error "${REPO_API_URL}/pulls?state=open" | \
              jq ".[] | select((.updated_at | fromdate) > (now - $DAYS*24*60*60)) | .number" > open_prs.txt

            cat open_prs.txt | sed "s/^/${CF_APP}-pr/" | sort > expected_apps.txt
            cat expected_apps.txt
      - run:
          name: Find current review apps
          command: |
            (cf apps | cut -d ' ' -f 1  | grep "${CF_APP}-pr" | sort || true) > current_apps.txt
            cat current_apps.txt
      - run:
          name: Find orphaned review apps
          command: |
            (comm -1 --output-delimiter="|" <(cat expected_apps.txt) <(cat current_apps.txt) | egrep -v '^\|' || true) > orphaned_apps.txt
            cat orphaned_apps.txt
      - run:
          name: Remove orphaned review apps
          command: |
            for ORPHANED_APP in $(cat orphaned_apps.txt)
              do echo "Removing ${ORPHANED_APP}"
                cf delete "${ORPHANED_APP}" -r -f
              done

jobs:
  write-docker-tag:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "docker_tag = \"$(git rev-parse --short HEAD)\"" >> terraform/config_<< parameters.environment >>.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - terraform/

  fmt-validate-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/fmt:
          path: terraform/
      - terraform/validate:
          path: terraform/

  plan-terraform:
    executor: terraform
    environment:
      TF_CLI_ARGS: "-lock=false"
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/plan:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars
          lock-timeout: 5m

  apply-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/apply:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars
          lock-timeout: 5m

  purge-reviews:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - cf-purge-reviews

  javascript-checks:
    docker:
      - image: cimg/node:16.13.2
    resource_class: small
    steps:
      - checkout
      - run: "yarn install"
      - run:
          name: "Lint changed files"
          command: |
            yarn run eslint $(git diff --name-only --diff-filter=ACM $(git merge-base main HEAD)..HEAD | egrep '\.js' | grep -v json)

  ruby-checks:

    executor: tariff/ruby
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Rubocop changed files
          when: always
          command: |
            bundle exec rubocop $(git diff --name-only --diff-filter=ACM $(git merge-base main HEAD)..HEAD | egrep '\.rb|\.rake') Gemfile
      - run:
          name: Inspecting with Brakeman
          when: always
          command: |
            bundle exec brakeman \
              -o /dev/stdout \
              -o test-results/brakeman/brakeman.junit \
              -o brakeman.html \
              --no-progress \
              --separate-models
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: tariff-frontend
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.2.2-node
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  jest-tests:
    docker:
      - image: cimg/node:16.10.0
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn run test
          name: Run YARN tests

  test:
    parallelism: 4
    docker:
      - image: cimg/ruby:3.2.2-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          NODE_OPTIONS: --openssl-legacy-provider
    resource_class: medium
    steps:
      - checkout
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          chrome-version: 114.0.5735.90 # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  deploy-dev:
    executor:
      name: tariff/ruby
    environment:
      SENTRY_ENVIRONMENT: development
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - cf-deploy-docker:
          docker_tag: dev-$CIRCLE_SHA1
          space: development
          environment_key: dev
          app_domain_prefix: dev
      - tariff/sentry-release:
          environment: development

  deploy-review:
    executor:
      name: tariff/ruby
    environment:
      SENTRY_ENVIRONMENT: development
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - cf-deploy-review

  deploy-main-to-staging:
    executor:
      name: tariff/ruby
    environment:
      SENTRY_ENVIRONMENT: staging
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - cf-deploy-docker:
          docker_tag: $CIRCLE_SHA1
          space: staging
          environment_key: staging
          app_domain_prefix: staging
      - tariff/sentry-release:
          environment: staging

  deploy-release-to-staging:
    executor:
      name: tariff/ruby
    steps:
      - cf-deploy-docker:
          docker_tag: $CIRCLE_TAG
          space: staging
          environment_key: staging
          app_domain_prefix: staging

  deploy-production:
    executor:
      name: tariff/ruby
    steps:
      - cf-deploy-docker:
          docker_tag: $CIRCLE_TAG
          space: production
          environment_key: production
          app_domain_prefix: www
      - tariff/sentry-release:
          environment: production
      - tariff/notify-production-release:
          app-name: Frontend
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

workflows:
  version: 2

  deploy-to-development:
    jobs:
      - ruby-checks:
          context: trade-tariff
          <<: *filter-not-main

      - javascript-checks:
          context: trade-tariff
          <<: *filter-not-main

      - write-docker-tag:
          name: write-docker-tag-dev
          environment: development
          <<: *filter-not-main
          requires:
            - ruby-checks
            - javascript-checks

      - purge-reviews:
          context: trade-tariff
          <<: *filter-not-main

      - jest-tests:
          context: trade-tariff
          <<: *filter-not-main
          requires:
            - ruby-checks
            - javascript-checks

      - test:
          context: trade-tariff
          <<: *filter-not-main
          requires:
            - ruby-checks
            - javascript-checks

      - fmt-validate-terraform:
          name: fmt-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          <<: *filter-not-main

      - plan-terraform:
          name: plan-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - write-docker-tag-dev
            - fmt-terraform-dev
          <<: *filter-not-main

      - build:
          name: build-dev
          context: trade-tariff
          dev-build: true
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          image_name: tariff-frontend
          ssm_parameter: "/development/FRONTEND_ECR_URL"
          <<: *filter-not-main

      - deploy-dev:
          context: trade-tariff
          requires:
            - jest-tests
            - test
            - build-dev
          <<: *filter-not-main

      - deploy-review:
          context: trade-tariff
          requires:
            - jest-tests
            - test
            - build-dev
          <<: *filter-not-main

      - apply-terraform:
          name: apply-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - jest-tests
            - test
            - plan-terraform-dev
            - build-and-push-dev
          <<: *filter-not-main

      - tariff/smoketests:
          name: smoketest-dev
          context: trade-tariff
          url: https://dev.trade-tariff.service.gov.uk
          yarn_run: dev-tariff-frontend-smoketests
          requires:
            - deploy-dev
          <<: *filter-not-main

  deploy-to-staging:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-staging
          environment: staging

      - plan-terraform:
          name: plan-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
          <<: *filter-not-main

      - build:
          name: build-live
          context: trade-tariff
          <<: *filter-main

      - tariff/build-and-push:
          name: build-and-push-live
          context: trade-tariff-terraform-aws-staging
          environment: staging
          image_name: tariff-frontend
          ssm_parameter: "/staging/FRONTEND_ECR_URL"
          <<: *filter-main

      - apply-terraform:
          name: apply-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
            - plan-terraform-staging
            - build-and-push-live
          <<: *filter-main

      - deploy-main-to-staging:
          context: trade-tariff
          requires:
            - build-live
          <<: *filter-main

      - tariff/smoketests:
          name: smoketest-staging
          context: trade-tariff
          url: https://staging.trade-tariff.service.gov.uk
          yarn_run: staging-tariff-frontend-smoketests
          requires:
            - deploy-main-to-staging
          <<: *filter-main

  deploy-to-production:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-prod
          environment: production

      - plan-terraform:
          name: plan-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod
          <<: *filter-not-main

      - promote-to-production?:
          type: approval
          <<: *filter-main

      - tariff/create-production-release:
          name: "create-production-release"
          context: trade-tariff
          image-name: tariff-frontend
          requires:
            - promote-to-production?
          <<: *filter-main

      - deploy-production:
          context: trade-tariff
          <<: *filter-release

      - apply-terraform:
          name: apply-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod
          <<: *filter-release
